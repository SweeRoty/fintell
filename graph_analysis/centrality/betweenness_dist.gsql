use graph sp_test
drop query betweenness_dist

/*
Standard Dijkstra algorithm for all-Source Shortest Path on directed/undirected graph with positive weight
*/

CREATE DISTRIBUTED QUERY betweenness_dist (STRING v_type, STRING e_type) FOR GRAPH sp_test {

    MapAccum<INT, MinAccum<FLOAT>> @@curr_dist;
    MapAccum<INT, MinAccum<FLOAT>> @distMap;
    #MapAccum<INT, ListAccum<INT>> @pathMap;
    MapAccum<INT, MapAccum<FLOAT, INT>> @pathMap;
    SetAccum<INT> @visited;
    SetAccum<INT> @through;

    V = {v_type.*};

    Start = select s
            from V:s
            post-accum
                int index = getvid(s),
                s.@distMap += (index -> 0),
                s.@pathMap += (index -> (0 -> index)),
                s.@through += index;

    while Start.size() > 0 limit 10 do
        Start = select t
                from Start:s -(e_type:e)- :t
                where s.@through.size() > 0 ### to be deleted
                accum
                    foreach source in s.@through do
                        if not t.@visited.contains(source) then
                            float dist = s.@distMap.get(source)+e.weight,
                            t.@distMap += (source -> dist),
                            t.@pathMap += (source -> (dist -> s.@pathMap.get(source).get(s.@distMap.get(source)))) ### unsuported
                        end,
                        s.@visited += source
                    end
                post-accum
                    s.@through.clear();

        @@curr_dist.clear();

        Start = select s
                from Start:s
                accum
                    foreach (source, dist) in s.@distMap do
                        if not s.@visited.contains(source) then
                            @@curr_dist += (source -> dist)
                        end
                    end
                post-accum
                    foreach (source, dist) in @@curr_dist do
                        if s.@distMap.containsKey(source) and abs(s.@distMap.get(source)-dist) < 0.001 then
                            s.@through += source,
                            int predecessor = s.@distToPre.get(source).get(dist),
                            s.@pathMap += (source -> )
                        end
                    end
                having s.@through.size() > 0;
    end;

    print V;
}

set query_timeout=120000
INSTALL QUERY betweenness_dist
run query betweenness_dist("Node", "Dist")