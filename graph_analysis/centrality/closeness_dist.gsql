use graph fb_test
drop query closeness_dist

/*
Output closeness distribution based on standard Dijkstra algorithm for all-source shortest path on directed/undirected graph with positive weight
*/

CREATE DISTRIBUTED QUERY closeness_dist (STRING v_type, STRING e_type, int max_iter, STRING file_location) FOR GRAPH fb_test {

    MapAccum<INT, MinAccum<FLOAT>> @@status_map;
    MapAccum<INT, MinAccum<FLOAT>> @distMap;
    SetAccum<INT> @visited;
    SetAccum<INT> @through;
    FILE f (file_location);

    V = {v_type.*};

    Start = select s
            from V:s
            post-accum
                int index = getvid(s),
                s.@distMap += (index -> 0),
                s.@through += index;

    while Start.size() > 0 limit max_iter do
        Start = select t
                from Start:s -(e_type:e)- :t
                where s.@through.size() > 0
                accum
                    foreach source in s.@through do
                        if not t.@visited.contains(source) then
                            t.@distMap += (source -> (s.@distMap.get(source)+e.weight))
                        end,
                        s.@visited += source
                    end
                post-accum
                    s.@through.clear();

        @@status_map.clear();

        Start = select s
                from Start:s
                accum
                    foreach (source, dist) in s.@distMap do
                        if not s.@visited.contains(source) then
                            @@status_map += (source -> dist)
                        end
                    end
                post-accum
                    foreach (source, dist) in @@status_map do
                        if s.@distMap.containsKey(source) and abs(s.@distMap.get(source)-dist) < 0.001 then
                            s.@through += source
                        end
                    end
                having s.@through.size() > 0;
    
    end;

    f.println("Vertex_ID", "farness");
    W = select s
        from V:s
        post-accum
            float farness = 0.0, 
            foreach (source, dist) in s.@distMap do
                farness = farness + dist
            end,
            f.println(s, (V.size()-1)/farness);

}

set query_timeout=1200000
INSTALL QUERY closeness_dist
run query closeness_dist("Account", "Connected", 10, "/home/ronghui_safe/hangeyang/output/closeness_dist.csv")