use graph fb_test
drop query path_stats

/*
Compute network diameter and average shortest path length using standard Dijkstra algorithm for all-source shortest path on directed/undirected graph with positive weight
*/

CREATE DISTRIBUTED QUERY path_stats (STRING v_type, STRING e_type, INT max_iter) FOR GRAPH fb_test {

    MaxAccum<FLOAT> @@diameter;
    AvgAccum @@avg_path_length;
    MapAccum<INT, MinAccum<FLOAT>> @@status_map;
    MapAccum<INT, MinAccum<FLOAT>> @distMap;
    SetAccum<INT> @visited;
    SetAccum<INT> @through;

    V = {v_type.*};

    Start = select s
            from V:s
            post-accum
                int index = getvid(s),
                s.@distMap += (index -> 0),
                s.@through += index;

    while Start.size() > 0 limit max_iter do
        Start = select t
                from Start:s -(e_type:e)- :t
                where s.@through.size() > 0
                accum
                    foreach source in s.@through do
                        if not t.@visited.contains(source) then
                            t.@distMap += (source -> (s.@distMap.get(source)+e.weight))
                        end,
                        s.@visited += source
                    end
                post-accum
                    s.@through.clear();

        @@status_map.clear();

        Start = select s
                from Start:s
                accum
                    foreach (source, dist) in s.@distMap do
                        if not s.@visited.contains(source) then
                            @@status_map += (source -> dist)
                        end
                    end
                post-accum
                    foreach (source, dist) in @@status_map do
                        if s.@distMap.containsKey(source) and abs(s.@distMap.get(source)-dist) < 0.001 then
                            s.@through += source
                        end
                    end
                having s.@through.size() > 0;
    end;

    V = select s
        from V:s
        post-accum
            foreach (tid, dist) in s.@distMap do
                int sid = getvid(s),
                if sid != tid then
                    @@diameter += dist,
                    @@avg_path_length += dist
                end
            end;
    
    #@@avg_path_length = @@avg_path_length/(V.size()*(V.size()-1));
    
    print @@diameter;
    print @@avg_path_length;
}

set query_timeout=120000
INSTALL QUERY path_stats
run query path_stats("Account", "Connected", 10)