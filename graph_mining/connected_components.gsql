use graph social_test
drop query conn_comp

CREATE QUERY conn_comp () FOR GRAPH social_test {
    # This query identifies the Connected Components (undirected edges)

    MinAccum<int> @cc_id = 0; //each vertex's tentative component id
    MinAccum<int> @prev_id = 0;
    OrAccum<bool> @active; //false
    MapAccum<int, int> @@compSizes;

    Start = {Person.*};

    # Initialize: Label each vertex with its own internal ID
    S = SELECT x
        FROM Start:x
        POST-ACCUM x.@cc_id = getvid(x), x.@prev_id = getvid(x);

    # Propagate smaller internal IDs until no more ID changes can be DOne
    WHILE (Start.size()>0) DO
        Start = SELECT t
                FROM Start:s -(Coworker:e)-> :t
                ACCUM t.@cc_id += s.@cc_id // If s has a smaller id than t, copy the id to t
                POST-ACCUM
                    CASE
                    WHEN t.@prev_id != t.@cc_id THEN // If t's id has changed
                        t.@prev_id += t.@cc_id,
                        t.@active = true
                    ELSE
                        t.@active = false
                    END
                HAVING t.@active == true;
    END;

    Start = {Person.*};

    Start = SELECT s
            FROM Start:s
            POST-ACCUM @@compSizes += (s.@cc_id -> 1);

    PRINT @@compSizes;
}

set query_timeout=180000
INSTALL QUERY conn_comp
run query conn_comp()